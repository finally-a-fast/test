# This file is a template, and might need editing before it works on your project.
# Select image from https://hub.docker.com/_/php/
image: php:7.4-cli

before_script:
    - apt-get update -yqq
    - apt-get install -yqq rsync git libonig-dev libmcrypt-dev libpq-dev libcurl4-gnutls-dev libicu-dev libvpx-dev libjpeg-dev libpng-dev libxpm-dev zlib1g-dev libfreetype6-dev libxml2-dev libexpat1-dev libbz2-dev libgmp3-dev libldap2-dev unixodbc-dev libsqlite3-dev libaspell-dev libsnmp-dev libpcre3-dev libtidy-dev zip unzip
    # Install & enable Xdebug for code coverage reports
    - pecl install xdebug apcu
    - docker-php-ext-enable xdebug apcu
    - pecl clear-cache
    # Install PHP extensions
    - docker-php-source extract
    - docker-php-ext-install curl json intl gd xml opcache dom
    - docker-php-source delete
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
    - git config --global user.email "bot@finally-a-fast.com"
    - git config --global user.name "FAF Bot"
    - curl -sS https://getcomposer.org/installer | php

stages:
    - build
    - test
    - docs
    - deploy

build:
    stage: build
    only:
        - dev
        - build
    script:
        - mkdir build
        - ls -lisa
        - rsync -Rr . ./build/
        - mv build/composer.json build/composer.json.real
        - sed -e "s;${CI_PROJECT_PATH};temp/composer;g" build/composer.json.real > build/composer.json
        - php composer.phar update -d build
        - mv build/composer.json.real build/composer.json
        - php composer.phar build -d build
    artifacts:
        paths:
            - build
        expire_in: 1 day

include:
    - template: Code-Quality.gitlab-ci.yml

code_quality:
    before_script:
        - ''

code_quality_html:
    extends: code_quality
    variables:
        REPORT_FORMAT: html
    artifacts:
        reports:
            codequality: ''
        expose_as: "Code Quality"
        paths: [ gl-code-quality-report.html ]

phpunit:php74:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --colors=never --log-junit ../report-phpunit74.xml
    allow_failure: true
    artifacts:
        when: always
        reports:
            junit: report-phpunit74.xml

phpunit:php8:
    image: php:8.0-cli
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - XDEBUG_MODE=coverage vendor/bin/phpunit --coverage-text --colors=never --log-junit ../report-phpunit80.xml
    allow_failure: true
    artifacts:
        when: always
        reports:
            junit: report-phpunit80.xml

phpstan:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - vendor/bin/phpstan analyse --error-format=junit --no-progress --no-interaction --memory-limit=-1 > ../report-phpstan.xml
    allow_failure: true
    artifacts:
        when: always
        reports:
            junit: report-phpstan.xml

psalm:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - vendor/bin/psalm --output-format=junit --no-progress > ../report-psalm.xml
    allow_failure: true
    artifacts:
        when: always
        reports:
            junit: report-psalm.xml

phpmd:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - vendor/bin/phpmd src html ruleset.xml > ../report-phpmess.html
    allow_failure: true
    artifacts:
        when: always
        expose_as: "PHP Mess Detector"
        paths: [ report-phpmess.html ]

infection:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - XDEBUG_MODE=coverage vendor/bin/roave-infection-static-analysis-plugin --no-progress --no-interaction
    allow_failure: true
    artifacts:
        when: always
        expose_as: "Infection"
        paths: [ build/infection.log, build/infection-summary.log ]

phpcs:
    stage: test
    only:
        - dev
        - build
    script:
        - cd build
        - vendor/bin/phpcs --report=junit > ../report-phpcs.xml
    allow_failure: true
    artifacts:
        when: always
        reports:
            junit: report-phpcs.xml

docs:
    stage: docs
    only:
        - build
    script:
        - "[ ! -d \"phpDocumentor\" ] && git clone https://github.com/phpDocumentor/phpDocumentor.git"
        - git --git-dir=phpDocumentor/.git --work-tree=phpDocumentor pull
        - php composer.phar install -d phpDocumentor
        - cd build
        - ../phpDocumentor/bin/phpdoc
        - rm -rf ../docs
        - mv docs ../docs
    artifacts:
        paths:
            - docs
        expire_in: 1 day

merge:
    stage: deploy
    only:
        - build
    script:
        - git clone git@gitlab.com:${CI_PROJECT_PATH}.git
        - cd ${CI_PROJECT_NAME}
        - git checkout dev
        - git checkout master
        - git merge -s recursive -X theirs dev || git commit -a -m "Merged conflict from pipeline ${CI_PIPELINE_ID}"
        - rm -rf *
        - cp -r ../build/* .
        - rm -rf docs
        - git add --all
        - git commit -a -m "Created build from pipeline ${CI_PIPELINE_ID}" || echo "No build changes"
        - git push
        - git checkout docs
        - rm -rf *
        - cp -r ../docs/* .
        - git add --all
        - git commit -a -m "Updated docs from pipeline ${CI_PIPELINE_ID}" || echo "No docs changes"
        - git push

upload:
    stage: deploy
    only:
        - build
    script:
        - echo "uploaded"
##    - ssh-add <(echo "$STAGING_PRIVATE_KEY")
##    - ssh -p2112 faf-production@www.finally-a-fast.com "mkdir _tmp"
##    - scp -p2112 -r build/* faf-production@www.finally-a-fast.com:_tmp
##    - ssh -p2112 faf-production@www.finally-a-fast.com "mv html _old && mv _tmp html"
##    - ssh -p2112 faf-production@www.finally-a-fast.com "rm -rf _foo"
